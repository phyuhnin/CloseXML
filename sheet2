using System;
using System.IO;
using System.Collections.Generic;
using ClosedXML.Excel;

class Program
{
    static void Main()
    {
        // CSVファイルのパス
        string csvFilePath = @"C:\path\to\your\file.csv";
        // 保存するExcelファイルのパス
        string excelFilePath = @"C:\path\to\your\file.xlsx";

        // CSVファイルを読み込み
        var csvLines = File.ReadAllLines(csvFilePath);

        // 新しいExcelワークブックを作成
        using (var workbook = new XLWorkbook())
        {
            // Sheet1を追加してCSVの内容を記載
            var sheet1 = workbook.Worksheets.Add("Sheet1");

            // CSVデータをSheet1に書き込む
            for (int rowIndex = 0; rowIndex < csvLines.Length; rowIndex++)
            {
                var csvRow = csvLines[rowIndex].Split(',');

                // CSVの各セルをSheet1に追加
                for (int colIndex = 0; colIndex < csvRow.Length; colIndex++)
                {
                    sheet1.Cell(rowIndex + 1, colIndex + 1).Value = csvRow[colIndex];
                }
            }

            // Sheet2を追加
            var sheet2 = workbook.Worksheets.Add("Sheet2");

            // ヘッダー行を検索してカラムを特定
            int colEmpNum = GetColumnNumberByHeader(sheet1, "社員番号");
            int colName = GetColumnNumberByHeader(sheet1, "名前");
            int colDept = GetColumnNumberByHeader(sheet1, "部署");
            int colPosition = GetColumnNumberByHeader(sheet1, "役職");

            // カラムをSheet2にコピー
            CopyColumn(sheet1, sheet2, colEmpNum, 1); // 「社員番号」をSheet2のカラムAへ
            CopyColumn(sheet1, sheet2, colName, 2);   // 「名前」をSheet2のカラムBへ
            CopyColumn(sheet1, sheet2, colDept, 3);   // 「部署」をSheet2のカラムCへ
            CopyColumn(sheet1, sheet2, colPosition, 4); // 「役職」をSheet2のカラムDへ

            // Sheet2から重複を削除
            RemoveDuplicates(sheet2, 1); // 1は社員番号のカラムAを指定

            // Excelファイルを保存
            workbook.SaveAs(excelFilePath);
        }

        Console.WriteLine("CSVファイルがExcelに変換され、カラムが移動され、重複が削除されました！");
    }

    // カラムをコピーするヘルパーメソッド
    static void CopyColumn(IXLWorksheet fromSheet, IXLWorksheet toSheet, int fromColumn, int toColumn)
    {
        var lastRow = fromSheet.Column(fromColumn).CellsUsed().Count();
        for (int row = 1; row <= lastRow; row++)
        {
            toSheet.Cell(row, toColumn).Value = fromSheet.Cell(row, fromColumn).Value;
        }
    }

    // ヘッダー名を基にカラム番号を取得するメソッド
    static int GetColumnNumberByHeader(IXLWorksheet sheet, string headerName)
    {
        var headerRow = sheet.Row(1); // 1行目がヘッダー行であると仮定
        foreach (var cell in headerRow.CellsUsed())
        {
            if (cell.Value.ToString().Equals(headerName, StringComparison.OrdinalIgnoreCase))
            {
                return cell.Address.ColumnNumber;
            }
        }
        throw new Exception($"ヘッダー '{headerName}' が見つかりませんでした。");
    }

    // 重複を削除するメソッド
    static void RemoveDuplicates(IXLWorksheet sheet, int empNumColumn)
    {
        var uniqueValues = new HashSet<string>();
        var lastRow = sheet.LastRowUsed().RowNumber();
        for (int row = lastRow; row >= 2; row--) // ヘッダー行を除いて下から上に向かって処理
        {
            var empNum = sheet.Cell(row, empNumColumn).GetString();
            if (uniqueValues.Contains(empNum))
            {
                sheet.Row(row).Delete(); // 重複が見つかった場合、その行を削除
            }
            else
            {
                uniqueValues.Add(empNum); // 一意な社員番号を追加
            }
        }
    }
}
